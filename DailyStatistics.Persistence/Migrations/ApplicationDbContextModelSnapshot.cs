// <auto-generated />
using System;
using DailyStatistics.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DailyStatistics.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DailyStatistics.Persistence.Models.DayRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DayRecords");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.TrackingActivityGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityGroups");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.TrackingActivityGroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Coefficient")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TrackingActivityGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackingActivityKindId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrackingActivityGroupId");

                    b.HasIndex("TrackingActivityKindId");

                    b.ToTable("ActivityGroupMembers");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.TrackingActivityKind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityKinds");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.TrackingActivityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DayRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackingActivityKindId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DayRecordId");

                    b.HasIndex("TrackingActivityKindId");

                    b.ToTable("ActivityRecords");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.DayRecord", b =>
                {
                    b.HasOne("DailyStatistics.Persistence.Models.User", "User")
                        .WithMany("DayRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.TrackingActivityGroup", b =>
                {
                    b.HasOne("DailyStatistics.Persistence.Models.User", "User")
                        .WithMany("TrackingActivityGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.TrackingActivityGroupMember", b =>
                {
                    b.HasOne("DailyStatistics.Persistence.Models.TrackingActivityGroup", "TrackingActivityGroup")
                        .WithMany("Members")
                        .HasForeignKey("TrackingActivityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyStatistics.Persistence.Models.TrackingActivityKind", "TrackingActivityKind")
                        .WithMany()
                        .HasForeignKey("TrackingActivityKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackingActivityGroup");

                    b.Navigation("TrackingActivityKind");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.TrackingActivityKind", b =>
                {
                    b.HasOne("DailyStatistics.Persistence.Models.User", "User")
                        .WithMany("TrackingActivityKinds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.TrackingActivityRecord", b =>
                {
                    b.HasOne("DailyStatistics.Persistence.Models.DayRecord", "DayRecord")
                        .WithMany("Records")
                        .HasForeignKey("DayRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyStatistics.Persistence.Models.TrackingActivityKind", "TrackingActivityKind")
                        .WithMany()
                        .HasForeignKey("TrackingActivityKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayRecord");

                    b.Navigation("TrackingActivityKind");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.DayRecord", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.TrackingActivityGroup", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("DailyStatistics.Persistence.Models.User", b =>
                {
                    b.Navigation("DayRecords");

                    b.Navigation("TrackingActivityGroups");

                    b.Navigation("TrackingActivityKinds");
                });
#pragma warning restore 612, 618
        }
    }
}
